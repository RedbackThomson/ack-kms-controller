// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package custom_key_store

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.CloudHsmClusterID, b.ko.Spec.CloudHsmClusterID) {
		delta.Add("Spec.CloudHsmClusterID", a.ko.Spec.CloudHsmClusterID, b.ko.Spec.CloudHsmClusterID)
	} else if a.ko.Spec.CloudHsmClusterID != nil && b.ko.Spec.CloudHsmClusterID != nil {
		if *a.ko.Spec.CloudHsmClusterID != *b.ko.Spec.CloudHsmClusterID {
			delta.Add("Spec.CloudHsmClusterID", a.ko.Spec.CloudHsmClusterID, b.ko.Spec.CloudHsmClusterID)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.CustomKeyStoreName, b.ko.Spec.CustomKeyStoreName) {
		delta.Add("Spec.CustomKeyStoreName", a.ko.Spec.CustomKeyStoreName, b.ko.Spec.CustomKeyStoreName)
	} else if a.ko.Spec.CustomKeyStoreName != nil && b.ko.Spec.CustomKeyStoreName != nil {
		if *a.ko.Spec.CustomKeyStoreName != *b.ko.Spec.CustomKeyStoreName {
			delta.Add("Spec.CustomKeyStoreName", a.ko.Spec.CustomKeyStoreName, b.ko.Spec.CustomKeyStoreName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.KeyStorePassword, b.ko.Spec.KeyStorePassword) {
		delta.Add("Spec.KeyStorePassword", a.ko.Spec.KeyStorePassword, b.ko.Spec.KeyStorePassword)
	} else if a.ko.Spec.KeyStorePassword != nil && b.ko.Spec.KeyStorePassword != nil {
		if *a.ko.Spec.KeyStorePassword != *b.ko.Spec.KeyStorePassword {
			delta.Add("Spec.KeyStorePassword", a.ko.Spec.KeyStorePassword, b.ko.Spec.KeyStorePassword)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.TrustAnchorCertificate, b.ko.Spec.TrustAnchorCertificate) {
		delta.Add("Spec.TrustAnchorCertificate", a.ko.Spec.TrustAnchorCertificate, b.ko.Spec.TrustAnchorCertificate)
	} else if a.ko.Spec.TrustAnchorCertificate != nil && b.ko.Spec.TrustAnchorCertificate != nil {
		if *a.ko.Spec.TrustAnchorCertificate != *b.ko.Spec.TrustAnchorCertificate {
			delta.Add("Spec.TrustAnchorCertificate", a.ko.Spec.TrustAnchorCertificate, b.ko.Spec.TrustAnchorCertificate)
		}
	}

	return delta
}
