resources:
  Alias:
    fields:
      TargetKeyId:
        is_primary_key: true
        is_required: true
        from:
          operation: CreateAlias
          path: TargetKeyId
    renames:
      operations:
        CreateAlias:
          input_fields:
            AliasName: Name
        DeleteAlias:
          input_fields:
            AliasName: Name
    exceptions:
      terminal_codes:
        - ValidationException
    hooks:
      sdk_read_many_post_build_request:
        code: |
          // Match by associated Key ID
          input.KeyId = r.ko.Spec.TargetKeyID
      sdk_read_many_pre_set_output:
        code: |
          // Filter resulting aliases, matching only the one with the name in the spec
          matchingAliases := []*svcsdk.AliasListEntry{}
          for _, elem := range resp.Aliases {
            if *elem.AliasName == *r.ko.Spec.Name {
              matchingAliases = append(matchingAliases, elem)
            }
          }
          resp.Aliases = matchingAliases
  CustomKeyStore:
    renames:
      operations:
        CreateCustomKeyStore:
          input_fields:
            CustomKeyStoreName: Name
        DescribeCustomKeyStores:
          input_fields:
            CustomKeyStoreName: Name
        DeleteCustomKeyStore:
          input_fields:
            CustomKeyStoreName: Name
    hooks:
      sdk_read_many_post_build_request:
        code: |
          // At most one of Store ID and Store Name are allowed
          if input.CustomKeyStoreId != nil && input.CustomKeyStoreName != nil {
            input.CustomKeyStoreName = nil
          }
  Key:
    hooks:
      sdk_delete_post_build_request:
        code: input.SetPendingWindowInDays(rm.getDeletePendingWindowInDays(r))
operations:
  ScheduleKeyDeletion:
    operation_type:
      - Delete
    resource_name: Key
ignore:
  field_paths:
    - CreateKeyInput.CustomerMasterKeySpec